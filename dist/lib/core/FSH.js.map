{"version":3,"sources":["../../../src/lib/core/FSH.js"],"names":["fs","promisifyAll","require","handleHDFSError","err","response","has","data","url","res","statusCode","validateUri","pathOrUri","validProtocols","try","uri","protocol","path","includes","FSH","constructor","user","host","port","conn","hostname","uriParts","omit","baseURI","client","create","defaults","baseURL","toString","maxRedirects","_constructURL","op","params","queryParams","extend","clone","query","_sendRequest","method","opts","request","catch","mkdir","mode","self","then","ensureDirAsync","permissions","chmod","chmodAsync","chown","owner","group","chownAsync","readdir","readdirAsync","FileStatuses","FileStatus","copy","destination","all","spread","srcURI","destURI","copyAsync","copyToLocal","copyFromLocal","tmpDir","tmpdir","timestamp","Date","getTime","tmpFile","hdfsSrc","srcUri","destUri","hdfs","createClient","remoteFileStream","createReadStream","localFileStream","createWriteStream","resolve","reject","pipe","on","isError","hdfsDestination","rename","moveAsync","remove","unlink","recursive","unlinkAsync","removeAsync","stat","statAsync","writeJson","json","useHDFS","writeJsonAsync","writeFile","JSON","stringify","writeFileAsync","headers","location","appendFile","appendFileAsync","readFile","readFileAsync","readJson","readJsonAsync"],"mappings":"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","file":"FSH.js","sourcesContent":["import _ from 'lodash';\nimport Promise from 'bluebird';\nimport axios from 'axios';\nimport URI  from 'urijs';\nimport { HDFSError, ValidationError, ResponseError } from './errors';\nimport WebHDFS from 'webhdfs';\nimport os from 'os';\n\nconst fs = Promise.promisifyAll( require('fs-extra') );\n\nconst handleHDFSError = err => {\n    if ( err.response ) {\n        if ( _.has( err.response, 'data.RemoteException' ) ) \n            throw new HDFSError( err.response.data );\n        else \n            throw new ResponseError( `Got unexpected status code for ${url}: ${res.statusCode}` );\n    }\n    throw err;\n};\n\nconst validateUri = ( pathOrUri, validProtocols = [ 'hdfs', 'file', '' ] ) => Promise.try( () => {\n    let uri = new URI( pathOrUri );\n    const protocol = uri.protocol();\n\n    if ( !protocol || protocol === 'file' )\n        uri = new URI({ protocol: 'file', path: uri.path() });\n\n    if ( !_.includes( validProtocols, protocol ) )\n        throw new ValidationError( `Unsupported protocol [${protocol}].` );\n\n    return uri;\n});\n\nexport default class FSH {\n    constructor( { user = 'root', host = 'localhost', port = 50070, protocol = 'http', path = '/webhdfs/v1' } ) {\n        this.conn = { user, host, port, protocol, path, hostname: host };\n        const uriParts = _.omit( this.conn, [ 'user', 'host' ] );\n        this.baseURI = new URI( uriParts );\n        this.client = axios.create();\n        this.client.defaults.baseURL = this.baseURI.toString();\n        this.client.defaults.maxRedirects = 0;\n    }\n\n    _constructURL( path, op, params = {} ) {\n        params['user.name'] = params['user.name'] || this.conn.user;\n        const queryParams = _.extend({ op }, params);\n        const uriParts = _.extend( _.clone( this.conn ), { path: this.conn.path + path } );\n        return new URI( uriParts ).query( queryParams );\n    }\n\n    _sendRequest( method, op, uri, params = {} ) {\n        const url = this._constructURL( uri.path(), op, params).toString();\n        const opts = { url, method };\n\n        if ( uri.hostname() )\n            opts.baseURL = new URI( this.baseURI ).hostname( uri.hostname() ).toString();\n\n        return this.client.request( opts ).catch( handleHDFSError );\n    }\n\n    mkdir( path, mode = 0o755 ) {\n        const self = this;\n        return validateUri( path ).then( uri => uri.protocol() !== 'hdfs' ?\n            fs.ensureDirAsync( uri.path(true), mode ) :\n            self._sendRequest( 'put', 'MKDIRS', uri, { permissions: mode } ).then( res => res.data )\n        );\n    }\n\n    chmod( path, mode = 0o755 ) {\n        const self = this;\n        return validateUri( path ).then( uri => uri.protocol() !== 'hdfs' ?\n            fs.chmodAsync( uri.path(true), mode ) :\n            self._sendRequest( 'put', 'SETPERMISSION', uri, { permissions: mode } ).then( res => res.data )\n        );\n    }\n\n    chown( path, owner, group ) {\n        const self = this;\n        return validateUri( path ).then( uri => uri.protocol() !== 'hdfs' ?\n            fs.chownAsync( uri.path(true), owner, group ) :\n            self._sendRequest( 'put', 'SETOWNER', uri, { owner, group } ).then( res => res.data )\n        );\n    }\n\n    readdir( path ) {\n        const self = this;\n        return validateUri( path ).then( uri => uri.protocol() !== 'hdfs' ?\n            fs.readdirAsync( uri.path(true), null ) :\n            self._sendRequest( 'get', 'LISTSTATUS', uri ).then( res => res.data.FileStatuses.FileStatus )\n        );\n    }\n\n    copy( path, destination ) {\n        const self = this;\n        return Promise.all([ validateUri( path ), validateUri( destination ) ])\n            .spread( ( srcURI, destURI ) => {\n                if ( srcURI.protocol() !== 'hdfs' && destURI.protocol() !== 'hdfs' )\n                    return fs.copyAsync( srcURI.path(true), destURI.path(true) );\n                else if ( srcURI.protocol() === 'hdfs' && destURI.protocol() !== 'hdfs' )\n                    return self.copyToLocal( path, destination );\n                else if ( srcURI.protocol() !== 'hdfs' && destURI.protocol() === 'hdfs' )\n                    return self.copyFromLocal( path, destination );\n                else if ( srcURI.protocol() === 'hdfs' && destURI.protocol() === 'hdfs' ) {\n                    const tmpDir = os.tmpdir();\n                    const timestamp = new Date().getTime();\n                    // TODO: replace with guids?\n                    const tmpFile = `${tmpDir}/${timestamp}`;\n\n                    return self.copyToLocal( path, tmpFile ).then( () => self.copyFromLocal( tmpFile, destination) );\n                }\n            });\n    }\n\n    // TODO: implement without webhdfs lib\n    copyToLocal( hdfsSrc, destination ) {\n        return Promise.all([ validateUri( hdfsSrc, [ 'hdfs' ] ), validateUri( destination, [ 'file', '' ] ) ] )\n            .spread( ( srcUri, destUri ) => {\n                const conn = _.omit( this.conn, 'hostname' );\n                if ( srcUri.hostname() ) conn.host = srcUri.hostname(); \n                const hdfs = WebHDFS.createClient( conn );\n\n                const remoteFileStream = hdfs.createReadStream( srcUri.path(true) );\n                const localFileStream = fs.createWriteStream( destUri.path(true) );\n\n                return new Promise( ( resolve, reject ) => {\n                    remoteFileStream.pipe( localFileStream );\n\n                    localFileStream.on( 'error', reject );\n\n                    localFileStream.on( 'finish', res => {\n                        if ( _.isError( res ) ) {\n                            return reject(res);\n                        }\n                        resolve();\n                    });\n                });\n            });\n    }\n\n    // TODO: implement without webhdfs lib \n    copyFromLocal( path, hdfsDestination ) {\n        const self = this;\n        return Promise.all([ validateUri( path, ['file', ''] ), validateUri( hdfsDestination, [ 'hdfs' ] ) ])\n            .spread( ( srcUri, destUri ) => {\n                const conn = _.omit( this.conn, 'hostname' );\n                if ( srcUri.hostname() ) conn.host = srcUri.hostname();\n                const hdfs = WebHDFS.createClient( conn );\n            \n                const localFileStream = fs.createReadStream( srcUri.path(true) );\n                const remoteFileStream = hdfs.createWriteStream( destUri.path(true) );\n                \n                return new Promise( ( resolve, reject ) => {\n                    localFileStream.pipe( remoteFileStream );\n\n                    remoteFileStream.on( 'error', reject );\n\n                    remoteFileStream.on( 'finish', res => {\n                        if ( _.isError( res ) ) {\n                            return reject( res );\n                        }\n                        resolve();\n                    });\n                });\n            });\n    }\n\n    rename( path, destination ) {\n        const self = this;\n        return Promise.all([ validateUri( path ), validateUri( destination ) ])\n            .spread( ( srcUri, destURI ) => {\n                if ( srcUri.protocol() !== 'hdfs' && destURI.protocol() !== 'hdfs' ) {\n                    return fs.moveAsync( srcUri.path(true), destURI.path(true) );\n                } else {\n                    return self.copy( path, destination ).then( () => self.remove( path ) );\n                }\n            });\n    }\n\n    unlink( path, recursive = null) {\n        const self = this;\n        return validateUri( path ).then( uri => uri.protocol() !== 'hdfs' ?\n            fs.unlinkAsync( uri.path(true) ) :\n            self._sendRequest( 'delete', 'DELETE', uri, { recursive } ).then( res => res.data )\n        );\n    }\n\n    remove( path ) {\n        const self = this;\n        return validateUri( path ).then( uri => uri.protocol() !== 'hdfs' ?\n            fs.removeAsync( uri.path(true) ) :\n            self.unlink( path, true )\n        );\n    }\n\n    stat( path ) {\n        const self = this;\n        return validateUri( path ).then( uri => uri.protocol() !== 'hdfs' ?\n            fs.statAsync( uri.path(true) ) :\n            self._sendRequest( 'get', 'GETFILESTATUS', uri ).then( res => res.data.FileStatus )\n        );\n    }\n\n    writeJson( path, json, opts = {} ) {\n        const self = this;\n        return validateUri( path ).then( uri => {\n            const useHDFS = uri.protocol() === 'hdfs';\n\n            if (typeof json !== 'object')\n                throw new ValidationError('Input must be an object. Try using writeFile instead or convert to an object.');\n\n            if ( !useHDFS ) return fs.writeJsonAsync( uri.path(true), json, opts );\n            \n            return self.writeFile( path, JSON.stringify( json ), opts );\n        });\n    }\n\n    writeFile( path, data, opts = {} ) {\n        const self = this;\n        return validateUri( path ).then( uri => uri.protocol() !== 'hdfs' ?\n            fs.writeFileAsync( uri.path(true), data, opts ) :\n            self._sendRequest( 'put', 'CREATE', uri, opts )\n                .then( res => res.headers.location )\n                .then( url => axios.request( { url, method: 'put', data } ) )\n                .then( res => res.data )\n                .catch( err => handleHDFSError )\n        );\n    }\n\n    appendFile( path, data, opts = {} ) {\n        const self = this;\n        return validateUri( path ).then( uri => uri.protocol() !== 'hdfs' ?\n            fs.appendFileAsync( uri.path(true), data, opts ) :\n            self._sendRequest( 'post', 'APPEND', uri, opts )\n                .then( res => res.headers.location )\n                .then( url => axios.request( { url, method: 'post', data } ) )\n                .then( res => res.data )\n                .catch( err => handleHDFSError )\n        );\n    }\n\n    readFile( path, opts = {} ) {\n        const self = this;\n        return validateUri( path ).then( uri => uri.protocol() !== 'hdfs' ?\n            fs.readFileAsync( uri.path(true), opts ) :\n            self._sendRequest( 'get', 'OPEN', uri, opts )\n                .then( res => res.headers.location )\n                .then( url => axios.request( { url, method: 'get' } ) )\n                .then( res => res.data )\n                .catch( err => handleHDFSError )\n        );\n    }\n\n    readJson( path, opts = {} ) {\n        const self = this;\n        return validateUri( path ).then( uri => uri.protocol() !== 'hdfs' ?\n            fs.readJsonAsync( uri.path(true), opts ) :\n            this.readFile( path, opts).then( JSON.stringify )\n        );\n    }\n}\n"]}