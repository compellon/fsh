{"version":3,"sources":["../../../src/lib/core/FSH.js"],"names":["fs","promisifyAll","require","handleHDFSError","err","response","has","data","url","res","statusCode","validateUri","pathOrUri","validProtocols","try","uri","isAbsolute","path","resolve","process","cwd","protocol","finalURIString","toString","test","replace","includes","FSH","constructor","user","host","port","conn","hostname","uriParts","omit","baseURI","client","create","defaults","baseURL","maxRedirects","validateStatus","status","_constructURL","op","params","queryParams","extend","clone","query","_sendRequest","method","opts","request","catch","mkdir","mode","self","then","ensureDirAsync","permissions","chmod","chmodAsync","chown","owner","group","chownAsync","readdir","readdirAsync","FileStatuses","FileStatus","copy","destination","all","spread","srcURI","destURI","copyAsync","copyToLocal","copyFromLocal","tmpDir","tmpdir","timestamp","Date","getTime","tmpFile","hdfsSrc","srcUri","destUri","hdfs","createClient","remoteFileStream","createReadStream","localFileStream","createWriteStream","reject","pipe","on","isError","hdfsDestination","rename","moveAsync","remove","unlink","recursive","unlinkAsync","removeAsync","stat","statAsync","writeJson","json","useHDFS","writeJsonAsync","writeFile","JSON","stringify","writeFileAsync","headers","location","appendFile","appendFileAsync","readFile","readFileAsync","readJson","readJsonAsync"],"mappings":"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","file":"FSH.js","sourcesContent":["import _ from 'lodash';\nimport Promise from 'bluebird';\nimport axios from 'axios';\nimport URI  from 'urijs';\nimport { HDFSError, ValidationError, ResponseError } from './errors';\nimport WebHDFS from 'webhdfs';\nimport os from 'os';\nimport path from 'path';\n\nconst fs = Promise.promisifyAll( require('fs-extra') );\n\nconst handleHDFSError = err => {\n    if ( err.response ) {\n        if ( _.has( err.response, 'data.RemoteException' ) )\n            throw new HDFSError( err.response.data );\n        else\n            throw new ResponseError( `Got unexpected status code for ${url}: ${res.statusCode}` );\n    }\n    throw err;\n};\n\nconst validateUri = ( pathOrUri, validProtocols = [ 'hdfs', 'file', '' ] ) => Promise.try( () => {\n    let uri = new URI( pathOrUri );\n\n    if ( !path.isAbsolute( uri.path() ) ) {\n        uri = new URI( path.resolve( process.cwd(), uri.path() ) );\n    }\n\n    if ( !uri.protocol() ) {\n        uri = uri.protocol('file');\n    }\n\n    let finalURIString = uri.toString();\n    if ( !/.*\\:\\/\\/.*/.test(finalURIString) ) {\n        finalURIString = finalURIString.replace(':', '://');\n    }\n\n    uri = URI( finalURIString );\n\n    if ( !_.includes( validProtocols, uri.protocol() ) )\n        throw new ValidationError( `Unsupported protocol [${uri.protocol()}].` );\n\n    return uri;\n});\n\nexport default class FSH {\n    constructor( { user = 'root', host = 'localhost', port = 50070, protocol = 'http', path = '/webhdfs/v1' } ) {\n        this.conn = { user, host, port, protocol, path, hostname: host };\n        const uriParts = _.omit( this.conn, [ 'user', 'host' ] );\n        this.baseURI = new URI( uriParts );\n        this.client = axios.create();\n        this.client.defaults.baseURL = this.baseURI.toString();\n        this.client.defaults.maxRedirects = 0;\n        this.client.defaults.validateStatus = status => status >= 200 && status < 400;\n    }\n\n    _constructURL( path, op, params = {} ) {\n        params['user.name'] = params['user.name'] || this.conn.user;\n        const queryParams = _.extend({ op }, params);\n        const uriParts = _.extend( _.clone( this.conn ), { path: this.conn.path + path } );\n        return new URI( uriParts ).query( queryParams );\n    }\n\n    _sendRequest( method, op, uri, params = {} ) {\n        const url = this._constructURL( uri.path(), op, params).toString();\n        const opts = { url, method };\n\n        if ( uri.hostname() )\n            opts.baseURL = new URI( this.baseURI ).hostname( uri.hostname() ).toString();\n\n        return this.client.request( opts ).catch( handleHDFSError );\n    }\n\n    mkdir( path, mode = 0o755 ) {\n        const self = this;\n        return validateUri( path ).then( uri => uri.protocol() !== 'hdfs' ?\n            fs.ensureDirAsync( uri.path(true), mode ) :\n            self._sendRequest( 'put', 'MKDIRS', uri, { permissions: mode } ).then( res => res.data )\n        );\n    }\n\n    chmod( path, mode = 0o755 ) {\n        const self = this;\n        return validateUri( path ).then( uri => uri.protocol() !== 'hdfs' ?\n            fs.chmodAsync( uri.path(true), mode ) :\n            self._sendRequest( 'put', 'SETPERMISSION', uri, { permissions: mode } ).then( res => res.data )\n        );\n    }\n\n    chown( path, owner, group ) {\n        const self = this;\n        return validateUri( path ).then( uri => uri.protocol() !== 'hdfs' ?\n            fs.chownAsync( uri.path(true), owner, group ) :\n            self._sendRequest( 'put', 'SETOWNER', uri, { owner, group } ).then( res => res.data )\n        );\n    }\n\n    readdir( path ) {\n        const self = this;\n        return validateUri( path ).then( uri => uri.protocol() !== 'hdfs' ?\n            fs.readdirAsync( uri.path(true), null ) :\n            self._sendRequest( 'get', 'LISTSTATUS', uri ).then( res => res.data.FileStatuses.FileStatus )\n        );\n    }\n\n    copy( path, destination ) {\n        const self = this;\n        return Promise.all([ validateUri( path ), validateUri( destination ) ])\n            .spread( ( srcURI, destURI ) => {\n                if ( srcURI.protocol() !== 'hdfs' && destURI.protocol() !== 'hdfs' )\n                    return fs.copyAsync( srcURI.path(true), destURI.path(true) );\n                else if ( srcURI.protocol() === 'hdfs' && destURI.protocol() !== 'hdfs' )\n                    return self.copyToLocal( path, destination );\n                else if ( srcURI.protocol() !== 'hdfs' && destURI.protocol() === 'hdfs' )\n                    return self.copyFromLocal( path, destination );\n                else if ( srcURI.protocol() === 'hdfs' && destURI.protocol() === 'hdfs' ) {\n                    const tmpDir = os.tmpdir();\n                    const timestamp = new Date().getTime();\n                    // TODO: replace with guids?\n                    const tmpFile = `${tmpDir}/${timestamp}`;\n\n                    return self.copyToLocal( path, tmpFile ).then( () => self.copyFromLocal( tmpFile, destination) );\n                }\n            });\n    }\n\n    // TODO: implement without webhdfs lib\n    copyToLocal( hdfsSrc, destination ) {\n        return Promise.all([ validateUri( hdfsSrc, [ 'hdfs' ] ), validateUri( destination, [ 'file', '' ] ) ] )\n            .spread( ( srcUri, destUri ) => {\n                const conn = _.omit( this.conn, 'hostname' );\n                if ( srcUri.hostname() ) conn.host = srcUri.hostname();\n                const hdfs = WebHDFS.createClient( conn );\n\n                const remoteFileStream = hdfs.createReadStream( srcUri.path(true) );\n                const localFileStream = fs.createWriteStream( destUri.path(true) );\n\n                return new Promise( ( resolve, reject ) => {\n                    remoteFileStream.pipe( localFileStream );\n\n                    localFileStream.on( 'error', reject );\n\n                    localFileStream.on( 'finish', res => {\n                        if ( _.isError( res ) ) {\n                            return reject(res);\n                        }\n                        resolve();\n                    });\n                });\n            });\n    }\n\n    // TODO: implement without webhdfs lib\n    copyFromLocal( path, hdfsDestination ) {\n        const self = this;\n        return Promise.all([ validateUri( path, ['file', ''] ), validateUri( hdfsDestination, [ 'hdfs' ] ) ])\n            .spread( ( srcUri, destUri ) => {\n                const conn = _.omit( this.conn, 'hostname' );\n                if ( srcUri.hostname() ) conn.host = srcUri.hostname();\n                const hdfs = WebHDFS.createClient( conn );\n\n                const localFileStream = fs.createReadStream( srcUri.path(true) );\n                const remoteFileStream = hdfs.createWriteStream( destUri.path(true) );\n\n                return new Promise( ( resolve, reject ) => {\n                    localFileStream.pipe( remoteFileStream );\n\n                    remoteFileStream.on( 'error', reject );\n\n                    remoteFileStream.on( 'finish', res => {\n                        if ( _.isError( res ) ) {\n                            return reject( res );\n                        }\n                        resolve();\n                    });\n                });\n            });\n    }\n\n    rename( path, destination ) {\n        const self = this;\n        return Promise.all([ validateUri( path ), validateUri( destination ) ])\n            .spread( ( srcUri, destURI ) => {\n                if ( srcUri.protocol() !== 'hdfs' && destURI.protocol() !== 'hdfs' ) {\n                    return fs.moveAsync( srcUri.path(true), destURI.path(true) );\n                } else {\n                    return self.copy( path, destination ).then( () => self.remove( path ) );\n                }\n            });\n    }\n\n    unlink( path, recursive = null) {\n        const self = this;\n        return validateUri( path ).then( uri => uri.protocol() !== 'hdfs' ?\n            fs.unlinkAsync( uri.path(true) ) :\n            self._sendRequest( 'delete', 'DELETE', uri, { recursive } ).then( res => res.data )\n        );\n    }\n\n    remove( path ) {\n        const self = this;\n        return validateUri( path ).then( uri => uri.protocol() !== 'hdfs' ?\n            fs.removeAsync( uri.path(true) ) :\n            self.unlink( path, true )\n        );\n    }\n\n    stat( path ) {\n        const self = this;\n        return validateUri( path ).then( uri => uri.protocol() !== 'hdfs' ?\n            fs.statAsync( uri.path(true) ) :\n            self._sendRequest( 'get', 'GETFILESTATUS', uri ).then( res => res.data.FileStatus )\n        );\n    }\n\n    writeJson( path, json, opts = {} ) {\n        const self = this;\n        return validateUri( path ).then( uri => {\n            const useHDFS = uri.protocol() === 'hdfs';\n\n            if (typeof json !== 'object')\n                throw new ValidationError('Input must be an object. Try using writeFile instead or convert to an object.');\n\n            if ( !useHDFS ) return fs.writeJsonAsync( uri.path(true), json, opts );\n\n            return self.writeFile( path, JSON.stringify( json ), opts );\n        });\n    }\n\n    writeFile( path, data, opts = {} ) {\n        const self = this;\n        return validateUri( path ).then( uri => uri.protocol() !== 'hdfs' ?\n            fs.writeFileAsync( uri.path(true), data, opts ) :\n            self._sendRequest( 'put', 'CREATE', uri, opts )\n                .then( res => res.headers.location )\n                .then( url => axios.request( { url, method: 'put', data } ) )\n                .then( res => res.data )\n                .catch( err => handleHDFSError )\n        );\n    }\n\n    appendFile( path, data, opts = {} ) {\n        const self = this;\n        return validateUri( path ).then( uri => uri.protocol() !== 'hdfs' ?\n            fs.appendFileAsync( uri.path(true), data, opts ) :\n            self._sendRequest( 'post', 'APPEND', uri, opts )\n                .then( res => res.headers.location )\n                .then( url => axios.request( { url, method: 'post', data } ) )\n                .then( res => res.data )\n                .catch( err => handleHDFSError )\n        );\n    }\n\n    readFile( path, opts = {} ) {\n        const self = this;\n        return validateUri( path ).then( uri => uri.protocol() !== 'hdfs' ?\n            fs.readFileAsync( uri.path(true), opts ) :\n            self._sendRequest( 'get', 'OPEN', uri, opts )\n                .then( res => res.headers.location )\n                .then( url => axios.request( { url, method: 'get' } ) )\n                .then( res => res.data )\n                .catch( err => handleHDFSError )\n        );\n    }\n\n    readJson( path, opts = {} ) {\n        const self = this;\n        return validateUri( path ).then( uri => uri.protocol() !== 'hdfs' ?\n            fs.readJsonAsync( uri.path(true), opts ) :\n            this.readFile( path, opts).then( JSON.stringify )\n        );\n    }\n}\n"]}