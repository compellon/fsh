{"version":3,"sources":["../../src/test/test.js"],"names":["promisifyAll","webHDFSServer","TEST_DIR","join","v4","LOCAL_TEST_DIR","tmpdir","LOCAL_TEST_DIR_URI","scheme","toString","HDFS_TEST_DIR_URI","protocol","hostname","port","path","WEBHDFS_TEST_DIR_URI","console","log","cyan","yellow","before","ensureDirSync","after","removeAsync","describe","testDirPath","testDirUri","it","mkdir","then","accessSync","srcFileName","srcFilePath","srcFileUri","destFileName","destFilePath","destFileUri","beforeEach","writeFile","afterEach","copy","unlink"],"mappings":"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","file":"test.js","sourcesContent":["import { expect } from 'chai';\nimport request from 'supertest';\nimport os from 'os';\nimport path from 'path';\nimport fsh from '../lib/fsh';\nimport uuid from 'node-uuid';\nimport URI from 'urijs';\nimport Promise from 'bluebird';\nimport colors from 'colors';\n// Using the native fs module for testing fsh\nimport fs from 'fs';\nimport fse from 'fs-extra';\n\nPromise.promisifyAll(fse);\n\n// const fsClient = fs.create({ host: '127.0.0.1', port: 1234, protocol: 'http', path: '/webhdfs/v1' });\nconst webHDFSServer = request('http://127.0.0.1:50070/webhdfs/v1');\n\n/**\n * - [copy](#copy)\n * - [copySync](#copy)\n * - [emptyDir](#emptydirdir-callback)\n * - [emptyDirSync](#emptydirdir-callback)\n * - [ensureFile](#ensurefilefile-callback)\n * - [ensureFileSync](#ensurefilefile-callback)\n * - [ensureDir](#ensuredirdir-callback)\n * - [ensureDirSync](#ensuredirdir-callback)\n * - [ensureLink](#ensurelinksrcpath-dstpath-callback)\n * - [ensureLinkSync](#ensurelinksrcpath-dstpath-callback)\n * - [ensureSymlink](#ensuresymlinksrcpath-dstpath-type-callback)\n * - [ensureSymlinkSync](#ensuresymlinksrcpath-dstpath-type-callback)\n * - [mkdirs](#mkdirsdir-callback)\n * - [mkdirsSync](#mkdirsdir-callback)\n * - [move](#movesrc-dest-options-callback)\n * - [outputFile](#outputfilefile-data-options-callback)\n * - [outputFileSync](#outputfilefile-data-options-callback)\n * - [outputJson](#outputjsonfile-data-options-callback)\n * - [outputJsonSync](#outputjsonfile-data-options-callback)\n * - [readJson](#readjsonfile-options-callback)\n * - [readJsonSync](#readjsonfile-options-callback)\n * - [remove](#removedir-callback)\n * - [removeSync](#removedir-callback)\n * - [walk](#walk)\n * - [writeJson](#writejsonfile-object-options-callback)\n * - [writeJsonSync](#writejsonfile-object-options-callback)\n */\n\nconst TEST_DIR = path.join( 'fsh', uuid.v4() );\nconst LOCAL_TEST_DIR = path.join( os.tmpdir(), TEST_DIR );\nconst LOCAL_TEST_DIR_URI = new URI( LOCAL_TEST_DIR ).scheme( 'file' ).toString();\nconst HDFS_TEST_DIR_URI = new URI( { protocol: 'hdfs', hostname: '127.0.0.1', port: 9000, path: `/tmp/${TEST_DIR}` } ).toString();\nconst WEBHDFS_TEST_DIR_URI = new URI( { protocol: 'webhdfs', hostname: '127.0.0.1', port: 1234, path: `/webhdfs/v1/tmp/${TEST_DIR}` } ).toString();\n\nconsole.log( `Directory path to be used in local testing: ${LOCAL_TEST_DIR.cyan}`.yellow );\nconsole.log( `Directory URI to be used in local testing: ${LOCAL_TEST_DIR_URI.cyan}`.yellow );\nconsole.log( `Directory HDFS URI to be used in local testing: ${HDFS_TEST_DIR_URI.cyan}`.yellow );\nconsole.log( `Directory WEBHDFS URI to be used in local testing: ${WEBHDFS_TEST_DIR_URI.cyan}`.yellow );\n\n\nbefore( () => fse.ensureDirSync( LOCAL_TEST_DIR ) );\n\nafter( () => fse.removeAsync( path.join( os.tmpdir(), 'fsh' ) ) );\n\ndescribe( 'mkdir', () => {\n    const testDirPath = path.join(LOCAL_TEST_DIR, 'somedir');\n    const testDirUri = new URI({ protocol: 'file', path: testDirPath });\n    \n    it( 'should create a local directory provided a path', () =>\n        fsh.mkdir( testDirPath ).then( () => fs.accessSync( testDirPath ) )\n    );\n\n    it( 'should create a local directory with provided a file uri', () =>\n        fsh.mkdir( testDirUri ).then( () => fs.accessSync( testDirUri.path() ) )\n    );\n});\n\ndescribe( 'copy', () => {\n    const srcFileName = uuid.v4();\n    const srcFilePath = path.join(LOCAL_TEST_DIR, srcFileName);\n    const srcFileUri = new URI({ protocol: 'file', path: srcFilePath });\n    const destFileName = uuid.v4();\n    const destFilePath = path.join(LOCAL_TEST_DIR, destFileName);\n    const destFileUri = new URI({ protocol: 'file', path: destFilePath });\n\n    beforeEach( () => fse.writeFile(srcFilePath, 'This is some really interesting text') );\n    afterEach( () => fse.removeAsync(srcFilePath) );\n\n    it( 'should copy a local file path to a destination file path', () =>\n        fsh.copy( srcFilePath, destFilePath )\n            .then( () => fs.accessSync(destFilePath) )\n            .then( () => fs.unlink(destFilePath) )\n    );\n\n    it( 'should copy a local file path to a destination file uri', () =>\n        fsh.copy( srcFilePath, destFileUri.toString() )\n            .then( () => fs.accessSync(destFileUri.path()) )\n            .then( () => fs.unlink(destFileUri.path()) )\n    );\n\n    it( 'should copy a file uri to a destination path', () =>\n        fsh.copy(srcFileUri.toString(), destFilePath)\n            .then( () => fs.accessSync(destFilePath) )\n            .then( () => fs.unlink(destFilePath) )\n    );\n\n    it( 'should copy a file uri to a destination file uri', () =>\n        fsh.copy( srcFileUri.toString(), destFileUri.toString() )\n            .then( () => fs.accessSync(destFileUri.path()) )\n            .then( () => fs.unlink(destFileUri.path()) )\n    );\n});\n"]}